<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/itram/bluetooth/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/itram/bluetooth/MainActivity.kt" />
              <option name="originalContent" value="@file:OptIn(ExperimentalMaterial3Api::class)&#10;&#10;package com.itram.bluetooth&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat&#10;import com.itram.bluetooth.permissions.PermissionViewModel&#10;import com.itram.bluetooth.permissions.PermissionState&#10;import com.itram.bluetooth.ui.AppNavGraph&#10;import com.itram.bluetooth.ui.TemperatureViewModel&#10;import com.itram.bluetooth.ui.theme.BluetoothTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.collectLatest&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    private val permissions = arrayOf(&#10;        Manifest.permission.BLUETOOTH,&#10;        Manifest.permission.BLUETOOTH_ADMIN,&#10;        Manifest.permission.ACCESS_FINE_LOCATION,&#10;        Manifest.permission.BLUETOOTH_SCAN,&#10;        Manifest.permission.BLUETOOTH_CONNECT&#10;    )&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val permissionViewModel: PermissionViewModel = viewModel()&#10;            val permissionState by permissionViewModel.state.collectAsState()&#10;            val requestPermissionsLauncher = rememberLauncherForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissionsResult -&gt;&#10;                val granted = permissionsResult.all { it.value }&#10;                permissionViewModel.onPermissionsResult(granted)&#10;            }&#10;            BluetoothTheme {&#10;                Surface(modifier = Modifier.fillMaxSize()) {&#10;                    when (permissionState) {&#10;                        is PermissionState.Explanation -&gt; {&#10;                            PermissionExplanationDialog(&#10;                                onAccept = { permissionViewModel.onAcceptExplanation(requestPermissionsLauncher) },&#10;                                onDecline = { permissionViewModel.onDeclineExplanation() }&#10;                            )&#10;                        }&#10;                        is PermissionState.Request -&gt; {&#10;                            // No UI, solo lanza el request (ya gestionado en onAcceptExplanation)&#10;                        }&#10;                        is PermissionState.Warning -&gt; {&#10;                            PermissionWarningDialog(&#10;                                onOpenSettings = {&#10;                                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                                        data = Uri.fromParts(&quot;package&quot;, packageName, null)&#10;                                    }&#10;                                    startActivity(intent)&#10;                                },&#10;                                onRetry = { permissionViewModel.onRetry() }&#10;                            )&#10;                        }&#10;                        is PermissionState.Granted -&gt; {&#10;                            AppNavGraph()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Si quieres refrescar el estado de permisos al volver a la app:&#10;        // permissionViewModel.checkPermissions() y actualizar el estado si es necesario&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TemperatureScreen(viewModel: TemperatureViewModel = hiltViewModel()) {&#10;    val isConnected by viewModel.isConnected.collectAsState()&#10;    val temperature by viewModel.temperature.collectAsState()&#10;    val bleDevices by viewModel.bleDevices.collectAsState()&#10;    var selectedDeviceAddress by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var showNoDevicesMessage by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(bleDevices) {&#10;        if (bleDevices.isEmpty()) {&#10;            showNoDevicesMessage = false&#10;            delay(4000) // Espera 4 segundos antes de mostrar el mensaje de no encontrados&#10;            if (bleDevices.isEmpty()) {&#10;                showNoDevicesMessage = true&#10;            }&#10;        } else {&#10;            showNoDevicesMessage = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize().padding(24.dp),&#10;        verticalArrangement = Arrangement.Top, // Cambiado de Center a Top&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        TopAppBar(title = { Text(&quot;Sensor de Temperatura BLE&quot;) })&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;        Text(text = if (isConnected) &quot;Conectado&quot; else &quot;Desconectado&quot;)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        if (isConnected) {&#10;            Button(onClick = { viewModel.readTemperature() }) {&#10;                Text(&quot;Leer temperatura&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (temperature != null) {&#10;                Text(text = &quot;Temperatura: ${temperature}°C&quot;)&#10;            } else {&#10;                Text(text = &quot;Temperatura no disponible&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(onClick = { viewModel.disconnect() }) {&#10;                Text(&quot;Desconectar&quot;)&#10;            }&#10;        } else {&#10;            Text(text = &quot;Dispositivos BLE encontrados:&quot;)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            if (bleDevices.isEmpty()) {&#10;                if (showNoDevicesMessage) {&#10;                    Text(text = &quot;No se han encontrado dispositivos BLE.&quot;)&#10;                } else {&#10;                    Text(text = &quot;Buscando dispositivos BLE…&quot;)&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.weight(1f)) {&#10;                    items(bleDevices) { device -&gt;&#10;                        Button(&#10;                            onClick = {&#10;                                selectedDeviceAddress = device.address&#10;                                viewModel.connect(device.address)&#10;                            },&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        ) {&#10;                            Text(text = &quot;${device.name ?: &quot;Sin nombre&quot;} (${device.address})&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (selectedDeviceAddress != null) {&#10;                Text(text = &quot;Dispositivo seleccionado: $selectedDeviceAddress&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionExplanationDialog(onAccept: () -&gt; Unit, onDecline: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = {},&#10;        title = { Text(&quot;Permisos de Bluetooth necesarios&quot;) },&#10;        text = {&#10;            Text(&quot;Esta aplicación necesita permisos de Bluetooth y localización para buscar y conectar con tu taza Ember. Sin estos permisos, la funcionalidad principal no estará disponible.&quot;)&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onAccept) { Text(&quot;Aceptar y continuar&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDecline) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PermissionWarningDialog(onOpenSettings: () -&gt; Unit, onRetry: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = {},&#10;        title = { Text(&quot;Permisos no concedidos&quot;) },&#10;        text = {&#10;            Text(&quot;No has concedido los permisos necesarios. La aplicación puede funcionar de forma inestable o no funcionar en absoluto. Puedes conceder los permisos desde los ajustes del sistema o reintentar la petición de permisos.&quot;)&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onOpenSettings) { Text(&quot;Abrir ajustes&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onRetry) { Text(&quot;Reintentar permisos&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    BluetoothTheme {&#10;        TemperatureScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="@file:OptIn(ExperimentalMaterial3Api::class)&#10;&#10;package com.itram.bluetooth&#10;&#10;import android.Manifest&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.provider.Settings&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.itram.bluetooth.permissions.PermissionViewModel&#10;import com.itram.bluetooth.permissions.PermissionState&#10;import com.itram.bluetooth.ui.AppNavGraph&#10;import com.itram.bluetooth.ui.TemperatureViewModel&#10;import com.itram.bluetooth.ui.theme.BluetoothTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import kotlinx.coroutines.delay&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            val permissionViewModel: PermissionViewModel = viewModel()&#10;            val permissionState by permissionViewModel.state.collectAsState()&#10;            val requestPermissionsLauncher = rememberLauncherForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissionsResult -&gt;&#10;                val granted = permissionsResult.all { entry -&gt; entry.value }&#10;                permissionViewModel.onPermissionsResult(granted)&#10;            }&#10;            BluetoothTheme {&#10;                Surface(modifier = Modifier.fillMaxSize()) {&#10;                    when (permissionState) {&#10;                        is PermissionState.Explanation -&gt; {&#10;                            PermissionExplanationDialog(&#10;                                onAccept = { permissionViewModel.onAcceptExplanation(requestPermissionsLauncher) },&#10;                                onDecline = { permissionViewModel.onDeclineExplanation() }&#10;                            )&#10;                        }&#10;                        is PermissionState.Request -&gt; {&#10;                            // No UI, solo lanza el request (ya gestionado en onAcceptExplanation)&#10;                        }&#10;                        is PermissionState.Warning -&gt; {&#10;                            PermissionWarningDialog(&#10;                                onOpenSettings = {&#10;                                    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;                                        data = Uri.fromParts(&quot;package&quot;, packageName, null)&#10;                                    }&#10;                                    startActivity(intent)&#10;                                },&#10;                                onRetry = { permissionViewModel.onRetry() }&#10;                            )&#10;                        }&#10;                        is PermissionState.Granted -&gt; {&#10;                            AppNavGraph()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // Si quieres refrescar el estado de permisos al volver a la app:&#10;        // permissionViewModel.checkPermissions() y actualizar el estado si es necesario&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TemperatureScreen(viewModel: TemperatureViewModel = hiltViewModel()) {&#10;    val isConnected by viewModel.isConnected.collectAsState()&#10;    val temperature by viewModel.temperature.collectAsState()&#10;    val bleDevices by viewModel.bleDevices.collectAsState()&#10;    var selectedDeviceAddress by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var showNoDevicesMessage by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(bleDevices) {&#10;        if (bleDevices.isEmpty()) {&#10;            showNoDevicesMessage = false&#10;            delay(4000) // Espera 4 segundos antes de mostrar el mensaje de no encontrados&#10;            if (bleDevices.isEmpty()) {&#10;                showNoDevicesMessage = true&#10;            }&#10;        } else {&#10;            showNoDevicesMessage = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize().padding(24.dp),&#10;        verticalArrangement = Arrangement.Top, // Cambiado de Center a Top&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        TopAppBar(title = { Text(&quot;Sensor de Temperatura BLE&quot;) })&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;        Text(text = if (isConnected) &quot;Conectado&quot; else &quot;Desconectado&quot;)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        if (isConnected) {&#10;            Button(onClick = { viewModel.readTemperature() }) {&#10;                Text(&quot;Leer temperatura&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (temperature != null) {&#10;                Text(text = &quot;Temperatura: ${temperature}°C&quot;)&#10;            } else {&#10;                Text(text = &quot;Temperatura no disponible&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Button(onClick = { viewModel.disconnect() }) {&#10;                Text(&quot;Desconectar&quot;)&#10;            }&#10;        } else {&#10;            Text(text = &quot;Dispositivos BLE encontrados:&quot;)&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            if (bleDevices.isEmpty()) {&#10;                if (showNoDevicesMessage) {&#10;                    Text(text = &quot;No se han encontrado dispositivos BLE.&quot;)&#10;                } else {&#10;                    Text(text = &quot;Buscando dispositivos BLE…&quot;)&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.weight(1f)) {&#10;                    items(bleDevices) { device -&gt;&#10;                        Button(&#10;                            onClick = {&#10;                                selectedDeviceAddress = device.address&#10;                                viewModel.connect(device.address)&#10;                            },&#10;                            modifier = Modifier.padding(vertical = 2.dp)&#10;                        ) {&#10;                            Text(text = &quot;${device.name ?: &quot;Sin nombre&quot;} (${device.address})&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            if (selectedDeviceAddress != null) {&#10;                Text(text = &quot;Dispositivo seleccionado: $selectedDeviceAddress&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PermissionExplanationDialog(onAccept: () -&gt; Unit, onDecline: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = {},&#10;        title = { Text(&quot;Permisos de Bluetooth necesarios&quot;) },&#10;        text = {&#10;            Text(&quot;Esta aplicación necesita permisos de Bluetooth y localización para buscar y conectar con tu taza Ember. Sin estos permisos, la funcionalidad principal no estará disponible.&quot;)&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onAccept) { Text(&quot;Aceptar y continuar&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDecline) { Text(&quot;Cancelar&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun PermissionWarningDialog(onOpenSettings: () -&gt; Unit, onRetry: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = {},&#10;        title = { Text(&quot;Permisos no concedidos&quot;) },&#10;        text = {&#10;            Text(&quot;No has concedido los permisos necesarios. La aplicación puede funcionar de forma inestable o no funcionar en absoluto. Puedes conceder los permisos desde los ajustes del sistema o reintentar la petición de permisos.&quot;)&#10;        },&#10;        confirmButton = {&#10;            TextButton(onClick = onOpenSettings) { Text(&quot;Abrir ajustes&quot;) }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onRetry) { Text(&quot;Reintentar permisos&quot;) }&#10;        }&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    BluetoothTheme {&#10;        TemperatureScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/itram/bluetooth/permissions/PermissionManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/itram/bluetooth/permissions/PermissionManager.kt" />
              <option name="originalContent" value="package com.itram.bluetooth.permissions&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import android.provider.Settings&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.core.content.ContextCompat&#10;&#10;sealed class PermissionState {&#10;    object Explanation : PermissionState()&#10;    object Request : PermissionState()&#10;    object Warning : PermissionState()&#10;    object Granted : PermissionState()&#10;}&#10;&#10;class PermissionManager(&#10;    private val activity: Activity,&#10;    private val permissions: Array&lt;String&gt;,&#10;    private val requestPermissionsLauncher: ActivityResultLauncher&lt;Array&lt;String&gt;&gt;&#10;) {&#10;    var state by mutableStateOf&lt;PermissionState&gt;(PermissionState.Explanation)&#10;        private set&#10;&#10;    fun checkPermissions(): Boolean = permissions.all {&#10;        ContextCompat.checkSelfPermission(activity, it) == PackageManager.PERMISSION_GRANTED&#10;    }&#10;&#10;    fun onAcceptExplanation() {&#10;        state = PermissionState.Request&#10;        requestPermissionsLauncher.launch(permissions)&#10;    }&#10;&#10;    fun onDeclineExplanation() {&#10;        state = PermissionState.Warning&#10;    }&#10;&#10;    fun onPermissionsResult(granted: Boolean) {&#10;        state = if (granted) PermissionState.Granted else PermissionState.Warning&#10;    }&#10;&#10;    fun onRetry() {&#10;        state = PermissionState.Explanation&#10;    }&#10;&#10;    fun onOpenSettings() {&#10;        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {&#10;            data = Uri.fromParts(&quot;package&quot;, activity.packageName, null)&#10;        }&#10;        activity.startActivity(intent)&#10;    }&#10;&#10;    fun refreshState() {&#10;        state = if (checkPermissions()) PermissionState.Granted else PermissionState.Warning&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.itram.bluetooth.permissions&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import android.provider.Settings&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.setValue&#10;import androidx.core.content.ContextCompat&#10;&#10;// PermissionManager ya no es necesario tras la refactorización al ViewModel. Puedes eliminar esta clase y el sealed class PermissionState si no se usan en otros archivos.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>